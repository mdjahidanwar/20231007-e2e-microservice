{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport FileUploadList from \"./FileUploadList\";\n\nfunction readFile(file) {\n  const fileReader = new FileReader();\n  return new Promise((resolve, reject) => {\n    fileReader.onerror = () => {\n      fileReader.abort();\n      reject(new DOMException(\"Problem parsing input file.\"));\n    };\n\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(file);\n  });\n}\n\nconst FileUpload = props => {\n  const [fileUploadList, setFileUploadList] = useState([]);\n\n  function onDrop(acceptedFiles) {\n    let newFileUploadList = acceptedFiles.map(element => {\n      return {\n        fileName: element.name,\n        status: 0\n      };\n    }).concat(fileUploadList);\n    setFileUploadList(newFileUploadList); // Loop through dropped files\n\n    acceptedFiles.forEach((file, index) => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const fileBase64 = yield readFile(file);\n        const fileMeta = {\n          fileName: file.name,\n          type: file.type,\n          size: file.size\n        };\n        const result = yield props.fileUploadCallback(fileBase64, fileMeta);\n        newFileUploadList = [...newFileUploadList];\n        newFileUploadList[index].status = result ? 1 : -1;\n        setFileUploadList(newFileUploadList);\n      }))();\n    });\n  }\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({\n    className: `p-5 text-center alert alert-${isDragActive ? \"success\" : \"secondary\"}`\n  }, getRootProps()), React.createElement(\"input\", Object.assign({}, getInputProps())), isDragActive ? React.createElement(\"p\", {\n    className: \"m-0\"\n  }, \"Drop the files here ...\") : React.createElement(\"p\", {\n    className: \"m-0\"\n  }, \"Drag 'n' drop some files here, or click to select files\")), React.createElement(FileUploadList, {\n    fileUploadList: fileUploadList\n  }));\n};\n\nexport default FileUpload;","map":{"version":3,"sources":["../../src/components/FileUpload.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAAe,QAAf,QAA8B,OAA9B;AACA,SAAQ,WAAR,QAA0B,gBAA1B;AAGA,OAAO,cAAP,MAA2B,kBAA3B;;AAEA,SAAS,QAAT,CAAkB,IAAlB,EAA4B;AAC3B,QAAM,UAAU,GAAG,IAAI,UAAJ,EAAnB;AAEA,SAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACtC,IAAA,UAAU,CAAC,OAAX,GAAqB,MAAK;AACzB,MAAA,UAAU,CAAC,KAAX;AACA,MAAA,MAAM,CAAC,IAAI,YAAJ,CAAiB,6BAAjB,CAAD,CAAN;AACA,KAHD;;AAKA,IAAA,UAAU,CAAC,MAAX,GAAoB,MAAK;AACxB,MAAA,OAAO,CAAC,UAAU,CAAC,MAAZ,CAAP;AACA,KAFD;;AAGA,IAAA,UAAU,CAAC,aAAX,CAAyB,IAAzB;AACA,GAVM,CAAP;AAWA;;AAED,MAAM,UAAU,GAA+B,KAAD,IAAwC;AACrF,QAAM,CAAC,cAAD,EAAiB,iBAAjB,IAAsC,QAAQ,CAAuB,EAAvB,CAApD;;AAEA,WAAS,MAAT,CAAgB,aAAhB,EAAqC;AACpC,QAAI,iBAAiB,GAAyB,aAAa,CAAC,GAAd,CAAmB,OAAD,IAAkB;AACjF,aAAO;AAAC,QAAA,QAAQ,EAAE,OAAO,CAAC,IAAnB;AAAyB,QAAA,MAAM,EAAE;AAAjC,OAAP;AACA,KAF6C,EAE3C,MAF2C,CAEpC,cAFoC,CAA9C;AAGA,IAAA,iBAAiB,CAAC,iBAAD,CAAjB,CAJoC,CAMpC;;AACA,IAAA,aAAa,CAAC,OAAd,CAAsB,CAAC,IAAD,EAAa,KAAb,KAA8B;AACnD,OAAC,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACX,cAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,IAAD,CAAjC;AACA,cAAM,QAAQ,GAAa;AAAC,UAAA,QAAQ,EAAE,IAAI,CAAC,IAAhB;AAAsB,UAAA,IAAI,EAAE,IAAI,CAAC,IAAjC;AAAuC,UAAA,IAAI,EAAE,IAAI,CAAC;AAAlD,SAA3B;AACA,cAAM,MAAM,GAAY,MAAM,KAAK,CAAC,kBAAN,CAAyB,UAAzB,EAAqC,QAArC,CAA9B;AACA,QAAA,iBAAiB,GAAG,CAAC,GAAG,iBAAJ,CAApB;AACA,QAAA,iBAAiB,CAAC,KAAD,CAAjB,CAAyB,MAAzB,GAAmC,MAAD,GAAW,CAAX,GAAe,CAAC,CAAlD;AACA,QAAA,iBAAiB,CAAC,iBAAD,CAAjB;AACA,OAPW,CAAZ;AAQA,KATD;AAUA;;AACD,QAAM;AAAC,IAAA,YAAD;AAAe,IAAA,aAAf;AAA8B,IAAA;AAA9B,MAA8C,WAAW,CAAC;AAAC,IAAA;AAAD,GAAD,CAA/D;AACA,SACC,KAAA,CAAA,aAAA,CAAC,KAAK,CAAC,QAAP,EAAe,IAAf,EACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACC,IAAA,SAAS,EAAE,+BAA+B,YAAY,GAAG,SAAH,GAAe,WAAW;AADjF,GAAA,EAEK,YAAY,EAFjB,CAAA,EAIC,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAW,aAAa,EAAxB,CAAA,CAJD,EAKE,YAAY,GACZ,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,IAAA,SAAS,EAAC;AAAb,GAAA,EAAkB,yBAAlB,CADY,GAEZ,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,IAAA,SAAS,EAAC;AAAb,GAAA,EAAkB,yDAAlB,CAPF,CADD,EAWC,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAC,IAAA,cAAc,EAAE;AAAjB,GAAf,CAXD,CADD;AAeA,CArCD;;AAuCA,eAAe,UAAf","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport FileUploadList from \"./FileUploadList\";\nfunction readFile(file) {\n    const fileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n        fileReader.onerror = () => {\n            fileReader.abort();\n            reject(new DOMException(\"Problem parsing input file.\"));\n        };\n        fileReader.onload = () => {\n            resolve(fileReader.result);\n        };\n        fileReader.readAsDataURL(file);\n    });\n}\nconst FileUpload = (props) => {\n    const [fileUploadList, setFileUploadList] = useState([]);\n    function onDrop(acceptedFiles) {\n        let newFileUploadList = acceptedFiles.map((element) => {\n            return { fileName: element.name, status: 0 };\n        }).concat(fileUploadList);\n        setFileUploadList(newFileUploadList);\n        // Loop through dropped files\n        acceptedFiles.forEach((file, index) => {\n            (() => __awaiter(this, void 0, void 0, function* () {\n                const fileBase64 = yield readFile(file);\n                const fileMeta = { fileName: file.name, type: file.type, size: file.size };\n                const result = yield props.fileUploadCallback(fileBase64, fileMeta);\n                newFileUploadList = [...newFileUploadList];\n                newFileUploadList[index].status = (result) ? 1 : -1;\n                setFileUploadList(newFileUploadList);\n            }))();\n        });\n    }\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", Object.assign({ className: `p-5 text-center alert alert-${isDragActive ? \"success\" : \"secondary\"}` }, getRootProps()),\n            React.createElement(\"input\", Object.assign({}, getInputProps())),\n            isDragActive ?\n                React.createElement(\"p\", { className: \"m-0\" }, \"Drop the files here ...\") :\n                React.createElement(\"p\", { className: \"m-0\" }, \"Drag 'n' drop some files here, or click to select files\")),\n        React.createElement(FileUploadList, { fileUploadList: fileUploadList })));\n};\nexport default FileUpload;\n//# sourceMappingURL=FileUpload.js.map"]},"metadata":{},"sourceType":"module"}