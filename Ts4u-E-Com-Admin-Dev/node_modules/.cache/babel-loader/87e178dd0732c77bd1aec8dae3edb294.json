{"ast":null,"code":"import React from 'react';\nimport Pagination from \"react-bootstrap/Pagination\";\n\nconst FileLibraryPager = props => {\n  function renderLinks() {\n    const links = [];\n    const count = props.count;\n    const page = props.page;\n    const itemsPerPage = props.itemsPerPage;\n    const offset = props.offsetDisplay !== undefined ? props.offsetDisplay : 2;\n    const totalPages = Math.ceil(count / itemsPerPage);\n    const prevPage = page - 1;\n    const nextPage = page + 1; // if not on first page, show prev and first page links\n\n    if (page > 1) {\n      links.push(React.createElement(Pagination.First, {\n        key: \"first\",\n        onClick: () => props.pagerCallback(1)\n      }));\n      links.push(React.createElement(Pagination.Prev, {\n        key: \"prev\",\n        onClick: () => props.pagerCallback(prevPage)\n      }));\n    } // loop to show links to range of pages around current page\n\n\n    for (let number = page - offset; number < page + offset + 1; number++) {\n      // if it's a valid page number...\n      if (number > 0 && number <= totalPages) {\n        links.push(React.createElement(Pagination.Item, {\n          key: number,\n          active: number === props.page,\n          onClick: () => props.pagerCallback(number)\n        }, number));\n      }\n    } // if not on last page, show next and last page links\n\n\n    if (page !== totalPages) {\n      links.push(React.createElement(Pagination.Next, {\n        key: \"next\",\n        onClick: () => props.pagerCallback(nextPage)\n      }));\n      links.push(React.createElement(Pagination.Last, {\n        key: \"last\",\n        onClick: () => props.pagerCallback(totalPages)\n      }));\n    }\n\n    return links;\n  }\n\n  return React.createElement(Pagination, null, renderLinks());\n};\n\nFileLibraryPager.defaultProps = {\n  offsetDisplay: 2\n};\nexport default FileLibraryPager;","map":{"version":3,"sources":["../../src/components/FileLibraryPager.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAA+B,OAA/B;AAEA,OAAO,UAAP,MAAuB,4BAAvB;;AAEA,MAAM,gBAAgB,GAAqC,KAAD,IAAiC;AAE1F,WAAS,WAAT,GAAoB;AACnB,UAAM,KAAK,GAAG,EAAd;AACA,UAAM,KAAK,GAAG,KAAK,CAAC,KAApB;AACA,UAAM,IAAI,GAAG,KAAK,CAAC,IAAnB;AACA,UAAM,YAAY,GAAG,KAAK,CAAC,YAA3B;AACA,UAAM,MAAM,GAAI,KAAK,CAAC,aAAN,KAAwB,SAAzB,GAAsC,KAAK,CAAC,aAA5C,GAA4D,CAA3E;AACA,UAAM,UAAU,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,GAAG,YAAlB,CAAnB;AACA,UAAM,QAAQ,GAAG,IAAI,GAAG,CAAxB;AACA,UAAM,QAAQ,GAAG,IAAI,GAAG,CAAxB,CARmB,CAUnB;;AACA,QAAI,IAAI,GAAG,CAAX,EAAc;AACb,MAAA,KAAK,CAAC,IAAN,CACC,KAAA,CAAA,aAAA,CAAC,UAAU,CAAC,KAAZ,EAAiB;AAAC,QAAA,GAAG,EAAC,OAAL;AAAa,QAAA,OAAO,EAAE,MAAM,KAAK,CAAC,aAAN,CAAoB,CAApB;AAA5B,OAAjB,CADD;AAGA,MAAA,KAAK,CAAC,IAAN,CACC,KAAA,CAAA,aAAA,CAAC,UAAU,CAAC,IAAZ,EAAgB;AAAC,QAAA,GAAG,EAAC,MAAL;AAAY,QAAA,OAAO,EAAE,MAAM,KAAK,CAAC,aAAN,CAAoB,QAApB;AAA3B,OAAhB,CADD;AAGA,KAlBkB,CAoBnB;;;AACA,SAAK,IAAI,MAAM,GAAG,IAAI,GAAG,MAAzB,EAAiC,MAAM,GAAG,IAAI,GAAG,MAAP,GAAgB,CAA1D,EAA6D,MAAM,EAAnE,EAAuE;AACtE;AACA,UAAI,MAAM,GAAG,CAAT,IAAc,MAAM,IAAI,UAA5B,EAAwC;AACvC,QAAA,KAAK,CAAC,IAAN,CACC,KAAA,CAAA,aAAA,CAAC,UAAU,CAAC,IAAZ,EAAgB;AACf,UAAA,GAAG,EAAE,MADU;AAEf,UAAA,MAAM,EAAE,MAAM,KAAK,KAAK,CAAC,IAFV;AAGf,UAAA,OAAO,EAAE,MAAM,KAAK,CAAC,aAAN,CAAoB,MAApB;AAHA,SAAhB,EAKE,MALF,CADD;AASA;AACD,KAlCkB,CAoCnB;;;AACA,QAAI,IAAI,KAAK,UAAb,EAAyB;AACxB,MAAA,KAAK,CAAC,IAAN,CACC,KAAA,CAAA,aAAA,CAAC,UAAU,CAAC,IAAZ,EAAgB;AAAC,QAAA,GAAG,EAAC,MAAL;AAAY,QAAA,OAAO,EAAE,MAAM,KAAK,CAAC,aAAN,CAAoB,QAApB;AAA3B,OAAhB,CADD;AAGA,MAAA,KAAK,CAAC,IAAN,CACC,KAAA,CAAA,aAAA,CAAC,UAAU,CAAC,IAAZ,EAAgB;AAAC,QAAA,GAAG,EAAC,MAAL;AAAY,QAAA,OAAO,EAAE,MAAM,KAAK,CAAC,aAAN,CAAoB,UAApB;AAA3B,OAAhB,CADD;AAGA;;AAED,WAAO,KAAP;AACA;;AAED,SACC,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,IAAX,EAAa,WAAW,EAAxB,CADD;AAIA,CAvDD;;AAyDA,gBAAgB,CAAC,YAAjB,GAAgC;AAC/B,EAAA,aAAa,EAAE;AADgB,CAAhC;AAIA,eAAe,gBAAf","sourceRoot":"","sourcesContent":["import React from 'react';\nimport Pagination from \"react-bootstrap/Pagination\";\nconst FileLibraryPager = (props) => {\n    function renderLinks() {\n        const links = [];\n        const count = props.count;\n        const page = props.page;\n        const itemsPerPage = props.itemsPerPage;\n        const offset = (props.offsetDisplay !== undefined) ? props.offsetDisplay : 2;\n        const totalPages = Math.ceil(count / itemsPerPage);\n        const prevPage = page - 1;\n        const nextPage = page + 1;\n        // if not on first page, show prev and first page links\n        if (page > 1) {\n            links.push(React.createElement(Pagination.First, { key: \"first\", onClick: () => props.pagerCallback(1) }));\n            links.push(React.createElement(Pagination.Prev, { key: \"prev\", onClick: () => props.pagerCallback(prevPage) }));\n        }\n        // loop to show links to range of pages around current page\n        for (let number = page - offset; number < page + offset + 1; number++) {\n            // if it's a valid page number...\n            if (number > 0 && number <= totalPages) {\n                links.push(React.createElement(Pagination.Item, { key: number, active: number === props.page, onClick: () => props.pagerCallback(number) }, number));\n            }\n        }\n        // if not on last page, show next and last page links\n        if (page !== totalPages) {\n            links.push(React.createElement(Pagination.Next, { key: \"next\", onClick: () => props.pagerCallback(nextPage) }));\n            links.push(React.createElement(Pagination.Last, { key: \"last\", onClick: () => props.pagerCallback(totalPages) }));\n        }\n        return links;\n    }\n    return (React.createElement(Pagination, null, renderLinks()));\n};\nFileLibraryPager.defaultProps = {\n    offsetDisplay: 2,\n};\nexport default FileLibraryPager;\n//# sourceMappingURL=FileLibraryPager.js.map"]},"metadata":{},"sourceType":"module"}